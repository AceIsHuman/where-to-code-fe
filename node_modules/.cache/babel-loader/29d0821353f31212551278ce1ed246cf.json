{"ast":null,"code":"var _jsxFileName = \"/Users/elijahdaniel/WhereToCode/src/components/NetworkSpeed/NetworkSpeed.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport NetworkTableGeneral from './NetworkTableGeneral';\nimport NetworkTableSpeeds from './NetworkTableSpeeds';\nimport xmlToJson from './XmlConverter';\nimport TriangleLoader from '../Loaders/TriangleLoader';\nimport { Box, Button, RoutedButton } from 'grommet';\nimport * as ROUTES from '../../Routes/routes';\n\nclass NetworkSpeed extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resetState = () => {\n      this.setState({\n        client: {},\n        server: {}\n      });\n    };\n\n    this.runNetworkTest = US_state => {\n      // Reset the state to trigger loading animation\n      this.resetState(); // Test the network speed against a server in the user's state\n\n      axios.get('https://wheretocode-master.herokuapp.com/api/network', {\n        params: {\n          state: US_state\n        }\n      }).then(res => {\n        this.setState({\n          download: res.data.speeds.download.toFixed(2),\n          upload: res.data.speeds.upload.toFixed(2),\n          originalDownload: res.data.speeds.originalDownload.toFixed(0),\n          originalUpload: res.data.speeds.originalDownload.toFixed(0),\n          client: res.data.client,\n          server: res.data.server\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      client: {},\n      server: {}\n    };\n  }\n\n  componentDidMount() {\n    // Pull the users lat and long from local storage\n    const latitude = localStorage.getItem('lat');\n    const longitude = localStorage.getItem('lng'); // Get the neareset address to the user coordinates \n\n    axios.get(\"//api.geonames.org/findNearestAddress?lat=\".concat(latitude, \"&lng=\").concat(longitude, \"&username=trip1701\")).then(res => {\n      const parser = new DOMParser(); // Get XML response\n\n      const XMLres = parser.parseFromString(res.data, \"text/xml\"); // Convert XML to JSON\n\n      const JSONres = xmlToJson(XMLres); // Get the user's state \n\n      const US_state = JSONres.geonames.address.adminName1[\"#text\"];\n      this.runNetworkTest(US_state);\n    }).catch(err => {\n      console.log(err);\n    });\n    this.runNetworkTest();\n  }\n\n  render() {\n    return React.createElement(Box, {\n      direction: \"row\",\n      justify: \"evenly\",\n      pad: \"medium\",\n      background: \"dark-2\",\n      maxWidth: \"300px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, Object.keys(this.state.client).length > 0 ? React.createElement(Box, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Box, {\n      direction: \"row\",\n      display: \"flex\",\n      direction: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(NetworkTableSpeeds, {\n      data: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))) : React.createElement(TriangleLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default NetworkSpeed;","map":{"version":3,"sources":["/Users/elijahdaniel/WhereToCode/src/components/NetworkSpeed/NetworkSpeed.jsx"],"names":["React","axios","NetworkTableGeneral","NetworkTableSpeeds","xmlToJson","TriangleLoader","Box","Button","RoutedButton","ROUTES","NetworkSpeed","Component","constructor","props","resetState","setState","client","server","runNetworkTest","US_state","get","params","state","then","res","download","data","speeds","toFixed","upload","originalDownload","originalUpload","catch","err","console","log","componentDidMount","latitude","localStorage","getItem","longitude","parser","DOMParser","XMLres","parseFromString","JSONres","geonames","address","adminName1","render","Object","keys","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport NetworkTableGeneral from './NetworkTableGeneral';\nimport NetworkTableSpeeds from './NetworkTableSpeeds';\nimport xmlToJson from './XmlConverter';\n\nimport TriangleLoader from '../Loaders/TriangleLoader';\n\nimport { Box, Button, RoutedButton } from 'grommet';\n\nimport * as ROUTES from '../../Routes/routes';\n\nclass NetworkSpeed extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { client: {}, server: {} }\n    }\n\n    resetState = () => {\n        this.setState({ client: {}, server: {} });\n    }\n\n    runNetworkTest = US_state => {\n        // Reset the state to trigger loading animation\n        this.resetState();\n\n        // Test the network speed against a server in the user's state\n        axios.get('https://wheretocode-master.herokuapp.com/api/network', {\n                params: {\n                    state: US_state\n                }\n            })\n             .then(res => { \n                            this.setState({ \n                            download: res.data.speeds.download.toFixed(2),\n                            upload: res.data.speeds.upload.toFixed(2),\n                            originalDownload: res.data.speeds.originalDownload.toFixed(0),\n                            originalUpload: res.data.speeds.originalDownload.toFixed(0),\n                            client: res.data.client,\n                            server: res.data.server\n                        })\n                        })\n             .catch(err => console.log(err));\n    }\n\n    componentDidMount() {\n        // Pull the users lat and long from local storage\n        const latitude = localStorage.getItem('lat');\n        const longitude = localStorage.getItem('lng');\n\n        // Get the neareset address to the user coordinates \n        axios.get(`//api.geonames.org/findNearestAddress?lat=${latitude}&lng=${longitude}&username=trip1701`)\n            .then(res => {\n                const parser = new DOMParser()\n\n                // Get XML response\n                const XMLres =  parser.parseFromString(res.data, \"text/xml\")\n\n                // Convert XML to JSON\n                const JSONres = xmlToJson(XMLres);\n\n                // Get the user's state \n                const US_state = JSONres.geonames.address.adminName1[\"#text\"];\n        \n                this.runNetworkTest(US_state);\n            })\n            .catch(err => {\n                console.log(err)\n            });\n\n        this.runNetworkTest();\n    }\n\n    render() {\n        return(\n            <Box direction='row'\n                 justify='evenly'\n                 pad='medium'\n                 background='dark-2'\n                 maxWidth='300px'\n            >\n\n\n                {\n                    Object.keys(this.state.client).length > 0 ? <Box>\n                                                                    <Box direction='row' display=\"flex\" direction=\"column\">\n                                                                        {/* <NetworkTableGeneral data={this.state} /> */}\n                                                                        <NetworkTableSpeeds data={this.state} />\n                                                                    </Box>\n\n                                                                    {/* \n                                                                        Below Components are incomplete mocks for future releases \n                                                                    */}\n\n                                                                    {/* <Button label='Run Test' \n                                                                            color='gold' \n                                                                            alignSelf='center' \n                                                                            pad='large' \n                                                                            onClick={this.runNetworkTest}\n                                                                        /> \n                                                                    */}\n\n                                                                    {/* <RoutedButton label='More Info'\n                                                                                    path={ROUTES.NETWORK} \n                                                                                    color='gold' \n                                                                                    alignSelf='center' \n                                                                                    pad='large' \n                                                                                    onClick={this.runNetworkTest}\n                                                                        /> \n                                                                    */}\n                                                                </Box>\n                                                              \n                                                              : <TriangleLoader/>\n                }\n\n            </Box>\n        );\n    }\n\n}\n\nexport default NetworkSpeed;"]},"metadata":{},"sourceType":"module"}