{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/elijahdaniel/WhereToCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/elijahdaniel/WhereToCode/src/components/Map/Map.jsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  align-self: center;\\n  border-radius: 10px;\\n  border: 2px solid gold;\\n  font-size: 18px;\\n  cursor: pointer;\\n  width: 200px;\\n  padding: 10px 56px;\\n  margin: 35px 0 10px;\\n  background: white;\\n  &:hover {\\n    box-shadow: 0px 5px 5px 0px rgba(176, 170, 176, 1);\\n    transform: translateY(-2px);\\n    transition: 0.2s;\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  box-sizing: border-box;\\n  margin: 0 auto;\\n  max-width: 1400px;\\n  height: 93.2vh;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n// Imports\n\n/*global google*/\nimport React, { Component } from \"react\"; // Import React Script Library to load Google object\n\nimport MapCards from \"./MapCards\";\nimport styled from \"styled-components\";\nimport FilteredMapCards from \"./FilteredMapCards\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleLocationError = (browserHasGeolocation = false) => {\n      // Set default location to Sydney, Australia\n      let pos = {\n        lat: -33.856,\n        lng: 151.215\n      };\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        center: pos,\n        zoom: 15\n      });\n    };\n\n    this.initialMapRender = () => {\n      // Get map object\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 15\n      }); // Gets new place when auto complete search is clicked\n\n      let place = this.state.initialPlace; // request object sets search query, search radius, and coordinates\n\n      let request = {\n        location: place.geometry.location,\n        id: place.place_id,\n        rating: place.rating,\n        icon: place.icon,\n        photos: place.photos,\n        radius: \"500\",\n        query: \"Cafe\"\n      }; // requests use of PlaceService\n\n      let service = new google.maps.places.PlacesService(map); // Sets map screen to new location based on lat and lng\n\n      map.setCenter(place.geometry.location); // Sets marker to lat/lng position\n      // Resets state when a new location is clicked\n\n      if (this.state.locations.name !== \"\") {\n        this.setState({\n          locations: [],\n          locationsFilter: []\n        });\n      } // cb function that returns place results\n\n\n      let callback = (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          results.map(place => {\n            // Adds map markers to nearby locations\n            let marker = new google.maps.Marker({\n              map: map,\n              position: place.geometry.location,\n              title: place.name\n            });\n            marker.setPosition(place.geometry.location);\n            marker.setVisible(true);\n            this.setState({\n              locations: [...this.state.locations, {\n                name: place.name,\n                icon: !place.photos // Loads an img if it has one, if not it uses default google icon\n                ? place.icon : place.photos[0].getUrl({\n                  maxWidth: 100\n                }),\n                id: place.place_id,\n                address: place.formatted_address,\n                rating: place.rating,\n                geocoder: google.maps.Geocoder\n              }]\n            });\n          });\n        }\n      }; // PlaceService has the `textSearch` method\n\n\n      service.textSearch(request, callback);\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        query: e.target.value\n      });\n    };\n\n    this.handleMapChange = () => {\n      // Get map object\n      let map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 15\n      }); // Gets new place when auto complete search is clicked\n\n      let place = this.autocomplete.getPlace(); // request object sets search query, search radius, and coordinates\n\n      let request = {\n        location: place.geometry.location,\n        id: place.place_id,\n        rating: place.rating,\n        icon: place.icon,\n        photos: place.photos,\n        radius: \"500\",\n        query: this.state.query || \"cafe\"\n      }; // requests use of PlaceService\n\n      let service = new google.maps.places.PlacesService(map); // Sets map screen to new location based on lat and lng\n\n      map.setCenter(place.geometry.location); // Sets marker to lat/lng position\n      // Resets state when a new location is clicked\n\n      if (this.state.locations.name !== \"\") {\n        this.setState({\n          locations: [],\n          locationsFilter: []\n        });\n      } // cb function that returns place results\n\n\n      let callback = (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          let bounds = new google.maps.LatLngBounds();\n          results.map(place => {\n            // Adds map markers to nearby locations\n            let marker = new google.maps.Marker({\n              map: map,\n              position: place.geometry.location,\n              title: place.name\n            });\n            bounds.extend(marker.getPosition());\n            marker.setPosition(place.geometry.location);\n            marker.setVisible(true);\n            map.fitBounds(bounds);\n            map.setCenter(bounds.getCenter());\n            this.setState({\n              locations: [...this.state.locations, {\n                name: place.name,\n                icon: !place.photos // Loads an img if it has one, if not it uses default google icon\n                ? place.icon : place.photos[0].getUrl({\n                  maxWidth: 300\n                }),\n                id: place.place_id,\n                address: place.formatted_address,\n                rating: place.rating,\n                geocoder: google.maps.Geocoder\n              }]\n            });\n          });\n        }\n      }; // PlaceService has the `textSearch` method\n\n\n      service.textSearch(request, callback);\n    };\n\n    this.handleFocus = event => event.target.select();\n\n    this.filterResults = () => {\n      if (this.state.filterBool === true) {\n        this.setState({\n          filterBool: false\n        });\n      } else {\n        this.setState({\n          filterBool: true\n        });\n      }\n\n      if (this.state.locationsFilter.length > 0) {\n        return;\n      } else {\n        this.state.locations.map(place => {\n          if (place.rating >= 4) {\n            this.setState(prevState => ({\n              locationsFilter: [...prevState.locationsFilter, place]\n            }));\n          }\n        });\n      }\n    };\n\n    this.searchButton = React.createRef();\n    this.state = {\n      initialPlace: this.props.place,\n      locations: [],\n      locationsFilter: [],\n      filterBool: false,\n      pos: {\n        lat: 0,\n        lng: 0\n      },\n      details: [],\n      query: \"\",\n      locationCoords: []\n    };\n  }\n\n  componentDidMount() {\n    // Try HTML5 Geolocation\n    if (this.state.initialPlace) {\n      this.initialMapRender();\n    } else {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          localStorage.setItem(\"lat\", position.coords.latitude);\n          localStorage.setItem(\"lng\", position.coords.longitude);\n          this.setState({\n            pos: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }); // Loads map\n\n          let map = new google.maps.Map(document.getElementById(\"map\"), {\n            center: this.state.pos,\n            zoom: 15\n          });\n        }, () => {\n          // If user denies geolocation info, default location is used\n          this.handleLocationError();\n        });\n      } // To disable any eslint 'google not defined' errors\n\n    }\n\n    this.autocomplete = new google.maps.places.Autocomplete(document.getElementById(\"autocomplete\")); // Sets autocomplete fields to be returned\n\n    this.autocomplete.setFields([\"address_components\", \"formatted_address\", \"geometry\", \"icon\", \"name\", \"place_id\"]); // When a new place is selected the map will be forced to update\n\n    this.autocomplete.addListener(\"place_changed\", this.handleMapChange);\n    this.searchButton.current.addEventListener(\"click\", this.handleMapChange);\n  }\n\n  render() {\n    return React.createElement(HomeContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: this.state.locations.length !== 0 ? \"49vw\" : \"0\",\n        padding: \"8% 0 0 0\",\n        overflow: \"hidden\",\n        marginTop: \"29px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"flex-end\",\n        justifyContent: \"space-evenly\",\n        fontSize: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, this.state.locations.length > 0 ? React.createElement(Button, {\n      onClick: this.filterResults,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"Highest Rated\") : null, !this.state.filterBool ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Results: \", this.state.locations.length) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Results: \", this.state.locationsFilter.length)), !this.state.filterBool ? React.createElement(MapCards, {\n      locations: this.state.locations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }) : React.createElement(FilteredMapCards, {\n      locationsFilter: this.state.locationsFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"5% 0 0 0\",\n        width: this.state.locations.length !== 0 ? \"49vw\" : \"100%\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"locationType\",\n      style: {\n        width: \"25%\"\n      },\n      placeholder: \"What are you looking for...ex: cafe\",\n      style: {\n        border: \"none\",\n        borderBottom: \"1px solid black\",\n        width: \"50%\",\n        marginBottom: \"20px\",\n        background: \"transparent\",\n        fontSize: \"20px\"\n      },\n      onChange: this.handleInputChange,\n      value: this.state.query,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"autocomplete\",\n      style: {\n        width: \"99.6%\",\n        height: \"30px\"\n      },\n      placeholder: \"Enter location...\",\n      style: {\n        border: \"none\",\n        borderBottom: \"1px solid black\",\n        width: \"50%\",\n        marginBottom: \"20px\",\n        background: \"transparent\",\n        fontSize: \"20px\"\n      },\n      onFocus: this.handleFocus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(Button, {\n      ref: this.searchButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"82.85vh\",\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"fakeMap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Map;\nconst HomeContainer = styled.div(_templateObject());\nconst Button = styled.button(_templateObject2());","map":{"version":3,"sources":["/Users/elijahdaniel/WhereToCode/src/components/Map/Map.jsx"],"names":["React","Component","MapCards","styled","FilteredMapCards","Map","constructor","props","handleLocationError","browserHasGeolocation","pos","lat","lng","map","google","maps","document","getElementById","center","zoom","initialMapRender","place","state","initialPlace","request","location","geometry","id","place_id","rating","icon","photos","radius","query","service","places","PlacesService","setCenter","locations","name","setState","locationsFilter","callback","results","status","PlacesServiceStatus","OK","marker","Marker","position","title","setPosition","setVisible","getUrl","maxWidth","address","formatted_address","geocoder","Geocoder","textSearch","handleInputChange","e","target","value","handleMapChange","autocomplete","getPlace","bounds","LatLngBounds","extend","getPosition","fitBounds","getCenter","handleFocus","event","select","filterResults","filterBool","length","prevState","searchButton","createRef","details","locationCoords","componentDidMount","navigator","geolocation","getCurrentPosition","localStorage","setItem","coords","latitude","longitude","Autocomplete","setFields","addListener","current","addEventListener","render","width","padding","overflow","marginTop","display","alignItems","justifyContent","fontSize","flexDirection","border","borderBottom","marginBottom","background","height","HomeContainer","div","Button","button"],"mappings":"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","sourcesContent":["// Imports\n/*global google*/\nimport React, { Component } from \"react\";\n\n// Import React Script Library to load Google object\nimport MapCards from \"./MapCards\";\n\nimport styled from \"styled-components\";\nimport FilteredMapCards from \"./FilteredMapCards\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.searchButton = React.createRef();\n\n    this.state = {\n      initialPlace: this.props.place,\n      locations: [],\n      locationsFilter: [],\n      filterBool: false,\n      pos: {\n        lat: 0,\n        lng: 0\n      },\n      details: [],\n      query: \"\",\n      locationCoords: []\n    };\n  }\n\n  componentDidMount() {\n    // Try HTML5 Geolocation\n    if (this.state.initialPlace) {\n      this.initialMapRender();\n    } else {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          position => {\n            localStorage.setItem(\"lat\", position.coords.latitude);\n            localStorage.setItem(\"lng\", position.coords.longitude);\n            this.setState({\n              pos: {\n                lat: position.coords.latitude,\n                lng: position.coords.longitude\n              }\n            });\n            // Loads map\n            let map = new google.maps.Map(document.getElementById(\"map\"), {\n              center: this.state.pos,\n              zoom: 15\n            });\n          },\n          () => {\n            // If user denies geolocation info, default location is used\n            this.handleLocationError();\n          }\n        );\n      } // To disable any eslint 'google not defined' errors\n    }\n\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById(\"autocomplete\")\n    );\n\n    // Sets autocomplete fields to be returned\n    this.autocomplete.setFields([\n      \"address_components\",\n      \"formatted_address\",\n      \"geometry\",\n      \"icon\",\n      \"name\",\n      \"place_id\"\n    ]);\n\n    // When a new place is selected the map will be forced to update\n    this.autocomplete.addListener(\"place_changed\", this.handleMapChange);\n\n    this.searchButton.current.addEventListener(\"click\", this.handleMapChange);\n  }\n\n  handleLocationError = (browserHasGeolocation = false) => {\n    // Set default location to Sydney, Australia\n    let pos = { lat: -33.856, lng: 151.215 };\n\n    let map = new google.maps.Map(document.getElementById(\"map\"), {\n      center: pos,\n      zoom: 15\n    });\n  };\n\n  initialMapRender = () => {\n    // Get map object\n    let map = new google.maps.Map(document.getElementById(\"map\"), {\n      zoom: 15\n    });\n\n    // Gets new place when auto complete search is clicked\n    let place = this.state.initialPlace;\n\n    // request object sets search query, search radius, and coordinates\n\n    let request = {\n      location: place.geometry.location,\n      id: place.place_id,\n      rating: place.rating,\n      icon: place.icon,\n      photos: place.photos,\n      radius: \"500\",\n      query: \"Cafe\"\n    };\n\n    // requests use of PlaceService\n    let service = new google.maps.places.PlacesService(map);\n\n    // Sets map screen to new location based on lat and lng\n    map.setCenter(place.geometry.location);\n    // Sets marker to lat/lng position\n\n    // Resets state when a new location is clicked\n    if (this.state.locations.name !== \"\") {\n      this.setState({ locations: [], locationsFilter: [] });\n    }\n\n    // cb function that returns place results\n    let callback = (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        results.map(place => {\n          // Adds map markers to nearby locations\n          let marker = new google.maps.Marker({\n            map: map,\n            position: place.geometry.location,\n            title: place.name\n          });\n\n          marker.setPosition(place.geometry.location);\n          marker.setVisible(true);\n\n          this.setState({\n            locations: [\n              ...this.state.locations,\n              {\n                name: place.name,\n                icon: !place.photos // Loads an img if it has one, if not it uses default google icon\n                  ? place.icon\n                  : place.photos[0].getUrl({\n                      maxWidth: 100\n                    }),\n                id: place.place_id,\n                address: place.formatted_address,\n                rating: place.rating,\n                geocoder: google.maps.Geocoder\n              }\n            ]\n          });\n        });\n      }\n    };\n    // PlaceService has the `textSearch` method\n    service.textSearch(request, callback);\n  };\n\n  handleInputChange = e => {\n    this.setState({ query: e.target.value });\n  };\n\n  handleMapChange = () => {\n    // Get map object\n    let map = new google.maps.Map(document.getElementById(\"map\"), {\n      zoom: 15\n    });\n\n    // Gets new place when auto complete search is clicked\n    let place = this.autocomplete.getPlace();\n\n    // request object sets search query, search radius, and coordinates\n    let request = {\n      location: place.geometry.location,\n      id: place.place_id,\n      rating: place.rating,\n      icon: place.icon,\n      photos: place.photos,\n      radius: \"500\",\n      query: this.state.query || \"cafe\"\n    };\n\n    // requests use of PlaceService\n    let service = new google.maps.places.PlacesService(map);\n\n    // Sets map screen to new location based on lat and lng\n    map.setCenter(place.geometry.location);\n    // Sets marker to lat/lng position\n\n    // Resets state when a new location is clicked\n    if (this.state.locations.name !== \"\") {\n      this.setState({ locations: [], locationsFilter: [] });\n    }\n\n    // cb function that returns place results\n    let callback = (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        let bounds = new google.maps.LatLngBounds();\n\n        results.map(place => {\n          // Adds map markers to nearby locations\n          let marker = new google.maps.Marker({\n            map: map,\n            position: place.geometry.location,\n            title: place.name\n          });\n\n          bounds.extend(marker.getPosition());\n\n          marker.setPosition(place.geometry.location);\n          marker.setVisible(true);\n          map.fitBounds(bounds);\n          map.setCenter(bounds.getCenter());\n\n          this.setState({\n            locations: [\n              ...this.state.locations,\n              {\n                name: place.name,\n                icon: !place.photos // Loads an img if it has one, if not it uses default google icon\n                  ? place.icon\n                  : place.photos[0].getUrl({\n                      maxWidth: 300\n                    }),\n                id: place.place_id,\n                address: place.formatted_address,\n                rating: place.rating,\n                geocoder: google.maps.Geocoder\n              }\n            ]\n          });\n        });\n      }\n    };\n    // PlaceService has the `textSearch` method\n    service.textSearch(request, callback);\n  };\n\n  handleFocus = event => event.target.select();\n\n  filterResults = () => {\n    if (this.state.filterBool === true) {\n      this.setState({ filterBool: false });\n    } else {\n      this.setState({ filterBool: true });\n    }\n\n    if (this.state.locationsFilter.length > 0) {\n      return;\n    } else {\n      this.state.locations.map(place => {\n        if (place.rating >= 4) {\n          this.setState(prevState => ({\n            locationsFilter: [...prevState.locationsFilter, place]\n          }));\n        }\n      });\n    }\n  };\n\n  render() {\n    return (\n      <HomeContainer>\n        <div\n          style={{\n            width: this.state.locations.length !== 0 ? \"49vw\" : \"0\",\n            padding: \"8% 0 0 0\",\n            overflow: \"hidden\",\n            marginTop: \"29px\"\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"flex-end\",\n              justifyContent: \"space-evenly\",\n              fontSize: \"20px\"\n            }}\n          >\n            {this.state.locations.length > 0 ? (\n              <Button onClick={this.filterResults}>Highest Rated</Button>\n            ) : null}\n\n            {!this.state.filterBool ? (\n              <p>Results: {this.state.locations.length}</p>\n            ) : (\n              <p>Results: {this.state.locationsFilter.length}</p>\n            )}\n          </div>\n\n          {!this.state.filterBool ? (\n            <MapCards locations={this.state.locations} />\n          ) : (\n            <FilteredMapCards locationsFilter={this.state.locationsFilter} />\n          )}\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: \"5% 0 0 0\",\n            width: this.state.locations.length !== 0 ? \"49vw\" : \"100%\",\n            alignItems: \"center\"\n          }}\n        >\n          <input\n            id=\"locationType\"\n            style={{ width: \"25%\" }}\n            placeholder=\"What are you looking for...ex: cafe\"\n            style={{\n              border: \"none\",\n              borderBottom: \"1px solid black\",\n              width: \"50%\",\n              marginBottom: \"20px\",\n              background: \"transparent\",\n              fontSize: \"20px\"\n            }}\n            onChange={this.handleInputChange}\n            value={this.state.query}\n          />\n          <input\n            id=\"autocomplete\"\n            style={{ width: \"99.6%\", height: \"30px\" }}\n            placeholder=\"Enter location...\"\n            style={{\n              border: \"none\",\n              borderBottom: \"1px solid black\",\n              width: \"50%\",\n              marginBottom: \"20px\",\n              background: \"transparent\",\n              fontSize: \"20px\"\n            }}\n            onFocus={this.handleFocus}\n          />\n          <Button ref={this.searchButton}>Search</Button>\n\n          <div\n            id=\"map\"\n            style={{\n              height: \"82.85vh\",\n              width: \"100%\"\n            }}\n          ></div>\n\n          {/* I used an empty div for the map object in the requestDetails function, this is a strange work around. If I use the actual map it reloads and we lose the position and markers. */}\n          <div id=\"fakeMap\"></div>\n        </div>\n      </HomeContainer>\n    );\n  }\n}\n\nexport default Map;\n\nconst HomeContainer = styled.div`\n  display: flex;\n  box-sizing: border-box;\n  margin: 0 auto;\n  max-width: 1400px;\n  height: 93.2vh;\n`;\n\nconst Button = styled.button`\n  align-self: center;\n  border-radius: 10px;\n  border: 2px solid gold;\n  font-size: 18px;\n  cursor: pointer;\n  width: 200px;\n  padding: 10px 56px;\n  margin: 35px 0 10px;\n  background: white;\n  &:hover {\n    box-shadow: 0px 5px 5px 0px rgba(176, 170, 176, 1);\n    transform: translateY(-2px);\n    transition: 0.2s;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}