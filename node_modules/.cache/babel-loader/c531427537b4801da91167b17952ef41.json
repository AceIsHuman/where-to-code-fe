{"ast":null,"code":"import _defineProperty from \"/Users/elijahdaniel/Labs/where-to-code-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { combineReducer } from 'redux'\nimport { UPDATE_INFO } from '../actions';\nconst initialState = {\n  username: ''\n};\nexport const userInfo = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_INFO:\n      return _objectSpread({}, state, {\n        username: action.payload\n      });\n  }\n};","map":{"version":3,"sources":["/Users/elijahdaniel/Labs/where-to-code-fe/src/components/Redux/reducer/index.js"],"names":["UPDATE_INFO","initialState","username","userInfo","state","action","type","payload"],"mappings":";;;;;;AAAA;AACA,SAASA,WAAT,QAA4B,YAA5B;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACzD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKN,WAAL;AACC,+BACII,KADJ;AAECF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAFlB;AAFF;AAOA,CARM","sourcesContent":["// import { combineReducer } from 'redux'\nimport { UPDATE_INFO } from '../actions'\n\nconst initialState = {\n\tusername: ''\n}\n\nexport const userInfo = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase UPDATE_INFO:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tusername: action.payload\n\t\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}