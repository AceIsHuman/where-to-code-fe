{"ast":null,"code":"import React from \"react\";\nimport axios from \"axios\";\nimport NetworkTableGeneral from \"./NetworkTableGeneral\";\nimport NetworkTableSpeeds from \"./NetworkTableSpeeds\";\nimport xmlToJson from \"./XmlConverter\";\nimport TriangleLoader from \"../Loaders/TriangleLoader\"; // import { Box, Button, RoutedButton } from 'grommet';\n\nimport * as ROUTES from \"../../Routes/routes\";\n\nclass NetworkSpeed extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resetState = () => {\n      this.setState({\n        client: {},\n        server: {}\n      });\n    };\n\n    this.runNetworkTest = US_state => {\n      // Reset the state to trigger loading animation\n      this.resetState(); // Test the network speed against a server in the user's state\n\n      axios.get(\"https://wheretocode-master.herokuapp.com/api/network\", {\n        params: {\n          state: US_state\n        }\n      }).then(res => {\n        this.setState({\n          download: res.data.speeds.download.toFixed(2),\n          upload: res.data.speeds.upload.toFixed(2),\n          originalDownload: res.data.speeds.originalDownload.toFixed(0),\n          originalUpload: res.data.speeds.originalDownload.toFixed(0),\n          client: res.data.client,\n          server: res.data.server\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      client: {},\n      server: {}\n    };\n  }\n\n  componentDidMount() {\n    // Pull the users lat and long from local storage\n    const latitude = localStorage.getItem(\"lat\");\n    const longitude = localStorage.getItem(\"lng\"); // Get the neareset address to the user coordinates\n\n    axios.get(\"//api.geonames.org/findNearestAddress?lat=\".concat(latitude, \"&lng=\").concat(longitude, \"&username=trip1701\")).then(res => {\n      const parser = new DOMParser(); // Get XML response\n\n      const XMLres = parser.parseFromString(res.data, \"text/xml\"); // Convert XML to JSON\n\n      const JSONres = xmlToJson(XMLres); // Get the user's state\n\n      const US_state = JSONres.geonames.address.adminName1[\"#text\"];\n      this.runNetworkTest(US_state);\n    }).catch(err => {\n      console.log(err);\n    });\n    this.runNetworkTest();\n  }\n\n  render() {\n    return \"\"; //   <Box\n    //     direction='row'\n    //     justify='evenly'\n    //     pad='medium'\n    //     background='dark-2'\n    //     maxWidth='300px'\n    //   >\n    //     {Object.keys(this.state.client).length > 0 ? (\n    //       <Box>\n    //         <Box direction='row' display='flex' direction='column'>\n    //           {/* <NetworkTableGeneral data={this.state} /> */}\n    //           <NetworkTableSpeeds data={this.state} />\n    //         </Box>\n    //         {/*\n    //                                                                     Below Components are incomplete mocks for future releases\n    //                                                                 */}\n    //         {/* <Button label='Run Test'\n    //                                                                         color='gold'\n    //                                                                         alignSelf='center'\n    //                                                                         pad='large'\n    //                                                                         onClick={this.runNetworkTest}\n    //                                                                     />\n    //                                                                 */}\n    //         {/* <RoutedButton label='More Info'\n    //                                                                                 path={ROUTES.NETWORK}\n    //                                                                                 color='gold'\n    //                                                                                 alignSelf='center'\n    //                                                                                 pad='large'\n    //                                                                                 onClick={this.runNetworkTest}\n    //                                                                     />\n    //                                                                 */}\n    //       </Box>\n    //     ) : (\n    //       <TriangleLoader />\n    //     )}\n    //   </Box>\n  }\n\n}\n\nexport default NetworkSpeed;","map":{"version":3,"sources":["/Users/ajohnson/Desktop/lambda/where-to-code-fe/src/components/NetworkSpeed/NetworkSpeed.jsx"],"names":["React","axios","NetworkTableGeneral","NetworkTableSpeeds","xmlToJson","TriangleLoader","ROUTES","NetworkSpeed","Component","constructor","props","resetState","setState","client","server","runNetworkTest","US_state","get","params","state","then","res","download","data","speeds","toFixed","upload","originalDownload","originalUpload","catch","err","console","log","componentDidMount","latitude","localStorage","getItem","longitude","parser","DOMParser","XMLres","parseFromString","JSONres","geonames","address","adminName1","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nimport NetworkTableGeneral from \"./NetworkTableGeneral\";\nimport NetworkTableSpeeds from \"./NetworkTableSpeeds\";\nimport xmlToJson from \"./XmlConverter\";\n\nimport TriangleLoader from \"../Loaders/TriangleLoader\";\n\n// import { Box, Button, RoutedButton } from 'grommet';\n\nimport * as ROUTES from \"../../Routes/routes\";\n\nclass NetworkSpeed extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { client: {}, server: {} };\n  }\n\n  resetState = () => {\n    this.setState({ client: {}, server: {} });\n  };\n\n  runNetworkTest = US_state => {\n    // Reset the state to trigger loading animation\n    this.resetState();\n\n    // Test the network speed against a server in the user's state\n    axios\n      .get(\"https://wheretocode-master.herokuapp.com/api/network\", {\n        params: {\n          state: US_state\n        }\n      })\n      .then(res => {\n        this.setState({\n          download: res.data.speeds.download.toFixed(2),\n          upload: res.data.speeds.upload.toFixed(2),\n          originalDownload: res.data.speeds.originalDownload.toFixed(0),\n          originalUpload: res.data.speeds.originalDownload.toFixed(0),\n          client: res.data.client,\n          server: res.data.server\n        });\n      })\n      .catch(err => console.log(err));\n  };\n\n  componentDidMount() {\n    // Pull the users lat and long from local storage\n    const latitude = localStorage.getItem(\"lat\");\n    const longitude = localStorage.getItem(\"lng\");\n\n    // Get the neareset address to the user coordinates\n    axios\n      .get(\n        `//api.geonames.org/findNearestAddress?lat=${latitude}&lng=${longitude}&username=trip1701`\n      )\n      .then(res => {\n        const parser = new DOMParser();\n\n        // Get XML response\n        const XMLres = parser.parseFromString(res.data, \"text/xml\");\n\n        // Convert XML to JSON\n        const JSONres = xmlToJson(XMLres);\n\n        // Get the user's state\n        const US_state = JSONres.geonames.address.adminName1[\"#text\"];\n\n        this.runNetworkTest(US_state);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    this.runNetworkTest();\n  }\n\n  render() {\n    return \"\";\n\n    //   <Box\n    //     direction='row'\n    //     justify='evenly'\n    //     pad='medium'\n    //     background='dark-2'\n    //     maxWidth='300px'\n    //   >\n    //     {Object.keys(this.state.client).length > 0 ? (\n    //       <Box>\n    //         <Box direction='row' display='flex' direction='column'>\n    //           {/* <NetworkTableGeneral data={this.state} /> */}\n    //           <NetworkTableSpeeds data={this.state} />\n    //         </Box>\n\n    //         {/*\n    //                                                                     Below Components are incomplete mocks for future releases\n    //                                                                 */}\n\n    //         {/* <Button label='Run Test'\n    //                                                                         color='gold'\n    //                                                                         alignSelf='center'\n    //                                                                         pad='large'\n    //                                                                         onClick={this.runNetworkTest}\n    //                                                                     />\n    //                                                                 */}\n\n    //         {/* <RoutedButton label='More Info'\n    //                                                                                 path={ROUTES.NETWORK}\n    //                                                                                 color='gold'\n    //                                                                                 alignSelf='center'\n    //                                                                                 pad='large'\n    //                                                                                 onClick={this.runNetworkTest}\n    //                                                                     />\n    //                                                                 */}\n    //       </Box>\n    //     ) : (\n    //       <TriangleLoader />\n    //     )}\n    //   </Box>\n  }\n}\n\nexport default NetworkSpeed;\n"]},"metadata":{},"sourceType":"module"}